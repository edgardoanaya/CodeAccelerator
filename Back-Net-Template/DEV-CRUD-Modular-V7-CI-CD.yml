# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- Demo-LineBaseV1

pool:
  vmImage: windows-latest

variables:
  - group: DEV-Azure-Front-Angular-ModularNX-Back-NetModular-Variables

steps:
- task: UseDotNet@2
  inputs:
    version: $(dotNetVersion)
    includePreviewVersions: true

- task: DotNetCoreCLI@2
  displayName: Install ReportGenerator tool
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-reportgenerator-globaltool --tool-path . 


#- script: dotnet build --configuration Release
#  displayName: 'Build .NET 7 Application'


- script: dotnet publish  --configuration Release
  displayName: 'Publish .NET 7 Application'
  workingDirectory: 'SoftwareOne.BaseLine.Api'

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'CodeQualitySWO'
    scannerMode: 'MSBuild'
    projectKey: 'NetCrud-ArqModular-v7-ASLab'
    projectName: 'NetCrud-ArqModular-v7-ASLab'
    extraProperties: |
      sonar.exclusions= **/Migrations/*.cs
      sonar.cs.opencover.reportsPaths="$(Agent.TempDirectory)/Coverage/*/coverage.opencover.xml"

- task: PowerShell@2
  condition: in(variables['Build.SourceBranchName'],'Demo-LineBaseV1','CRUD-Modular-V7')
  displayName: "Powershell execution for updated SONARQube"
  inputs:
    targetType: 'inline'
    script: |
      $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w/,-.]*"\,?'
        Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"

- script: dotnet build --configuration Release
  displayName: 'Build .NET 7 Application'

- script: dotnet test --results-directory=$(Agent.TempDirectory)/Coverage --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
  displayName: 'Test .NET 76 Application'

- script: dotnet publish  --configuration Release
  displayName: 'Publish .NET 7 Application'
  workingDirectory: 'SoftwareOne.BaseLine.Api'

- task: SonarQubeAnalyze@5
  displayName: "SonarQube Analysys"

- task: CmdLine@2
  displayName: 'Generando reportes reportGenerator' 
  inputs:
    script: 'reportgenerator "-reports:$(Agent.TempDirectory)/Coverage/*/coverage.opencover.xml" -targetdir:"$(Agent.TempDirectory)/Reports" -reporttypes:Html;Cobertura;SonarQube'

- task: PublishCodeCoverageResults@1
  displayName: 'Publicando Reportes Azure'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/Reports/Cobertura.xml'


- task: ArchiveFiles@2
  displayName: 'Archive Files $(projectName)'
  inputs:
    rootFolderOrFile: 'SoftwareOne.BaseLine.Api/bin/release/net7.0/publish'
    archiveFile: '$(Build.ArtifactStagingDirectory)/SoftwareOne.BaseLine.Api.zip'
    includeRootFolder: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Published'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/SoftwareOne.BaseLine.Api.zip'
    ArtifactName: SoftwareOne.BaseLine.Api
    publishLocation: 'Container'


- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'serviceconnectionDemoCodeAccelerator' 
    appType: 'apiApp' 
    WebAppName: 'ApiBackendDemoAccelerator'
    packageForLinux: '$(Build.ArtifactStagingDirectory)/SoftwareOne.BaseLine.Api.zip'
    #packageForLinux: '$(Build.ArtifactStagingDirectory)/**/*.zip'