//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Santiago Gil Rold√°n</author>
// <email>mailto:santiago.gil2@softwareone.com</email>
// <summary>Class of the implementation of the services of the application for the Entity (User)</summary>
using static SoftwareOne.BaseLine.Core.Utilities.Util;

namespace SoftwareOne.BaseLine.ApplicationServices.Services
{
    /// <summary>
    /// Class of the implementation of the services of the application for the Entity (User)
    /// </summary>
    public partial class User :
        Core.Services.BaseApplicationServices<Entities.User,
                                              Interfaces.DataAccess.IUser,
                                              Base.Application.Validators.User>,
        Interfaces.ApplicationServices.Services.IUser
    {
        /// <summary>
        /// Constructor to initialize the data access layer, Context Instance [User].
        /// </summary>
        /// <param name="repositoryContext">Data Access Context Instance</param>
        public User(Interfaces.DataAccess.IUser repositoryContext, Core.ProcessServicesApplication.IProcessServicesApplication processServicesApplication, Base.Application.Validators.User validator)
            : base(repositoryContext, processServicesApplication, validator) { }

        public new Task<Entities.User> AddAsync(Entities.User objectAdd)
        {
            objectAdd.PasswordHash = HashPassword(objectAdd.PasswordHash, out var salt);
            objectAdd.Salt = salt;

            return base.AddAsync(objectAdd);
        }

        public new Task<Entities.User> UpdateAsync(Entities.User objectUpdate)
        {
            // Hash password and salt
            objectUpdate.PasswordHash = HashPassword(objectUpdate.PasswordHash, out var salt);
            objectUpdate.Salt = salt;

            return base.UpdateAsync(objectUpdate);
        }
    }
}