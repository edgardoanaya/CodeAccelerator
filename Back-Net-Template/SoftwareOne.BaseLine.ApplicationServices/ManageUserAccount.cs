//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Santiago Gil Roldán</author>
// <email>mailto:santiago.gil2@softwareone.com</email>
// <summary>Implementation to manage the public UserAccount Functionalities.</summary>
using SoftwareOne.BaseLine.EntitiesDto.Request;
using SoftwareOne.BaseLine.EntitiesDto.Response;
using SoftwareOne.BaseLine.Core.Exceptions;
using static SoftwareOne.BaseLine.Core.Utilities.Util;

namespace SoftwareOne.BaseLine.ApplicationServices
{
    public class ManageUserAccount : Interfaces.ApplicationServices.IManageUserAccount
    {
        /// <summary>
        /// Constant that contains the Bytes Size for the hash keys.
        /// </summary>
        private const int BYTES_SIZE = 256;
        /// <summary>
        /// Constant that contains the bits in a Byte.
        /// </summary>
        private const int BITS_PER_BYTE = 8;
        /// <summary>
        /// UserAuthenticationService instance.
        /// </summary>
        private readonly Authentication.IUserAuthenticator _userAuthenticator;
        /// <summary>
        /// ApplicationServices instance for entity [User].
        /// </summary>
        private readonly Interfaces.ApplicationServices.Services.IUser _userApplicationServices;

        /// <summary>
        /// Constructor to initialize the data access layer.
        /// </summary>
        /// <param name="repositoryContext">Context Database Instance</param>
        public ManageUserAccount(Interfaces.ApplicationServices.Services.IUser userApplicationServices,
                                 Authentication.IUserAuthenticator userAuthenticator)
        {
            this._userAuthenticator = userAuthenticator;
            this._userApplicationServices = userApplicationServices;
        }

        /// <summary>
        /// Validates the login request.
        /// </summary>
        /// <param name="loginRequest"></param>
        /// <returns>Task<LoginAuthentication></returns>
        /// <exception cref="Requisicion.Iup.Common.Exceptions.DomainValidationException"></exception>
        public async Task<LoginAuthentication> LoginApplicationAsync(LoginRequest loginRequest)
        {
            if(loginRequest == null || loginRequest.User == null || loginRequest.Password == null) {
                throw new SwoDomainValidationException(string.Format(ApplicationTexts.ResourceValidations.InvalidRequestData));
            }
            var user = await _userApplicationServices.GetAsync(x => x.UserName == loginRequest.User) ??
                                    throw new SwoDomainValidationException(string.Format(ApplicationTexts.ResourceValidations.UserNotExist, loginRequest.User));

            if (user.State != 1)
            {
                throw new SwoUnauthorizedException(string.Format(ApplicationTexts.ResourceValidations.UserInactive, loginRequest.User));
            }

            byte[] decodedHashedPassword = Convert.FromBase64String(user.PasswordHash);

            if (decodedHashedPassword.Length == 0 || decodedHashedPassword.Length != BYTES_SIZE / BITS_PER_BYTE)
            {
                // Bad size
                throw new SwoUnauthorizedException(string.Format(ApplicationTexts.ResourceValidations.PasswordHashSizeInvalid, loginRequest.User));
            }

            var isPasswordValid = VerifyHashedPassword(loginRequest.Password, user.Salt, user.PasswordHash);

            if (!isPasswordValid)
            {
                throw new SwoUnauthorizedException(string.Format(ApplicationTexts.ResourceValidations.PasswordInvalid, loginRequest.User));
            }

            return new LoginAuthentication
            {
                FullName = user.FullName,
                RoleId = user.RoleId,
                RoleName = user.Role.Name,
                Token = _userAuthenticator.GenerateTokenAuthentication(new Authentication.User(user.UserName, user.Email, user.FullName, user.Id))
            };
        }

        /// <summary>
        /// Validates a session token.
        /// </summary>
        /// <param name="token"></param>
        /// <returns>string</returns>
        public string ValidateSession(string token) {
            return _userAuthenticator.ValidateTokenAuthentication(token);
        }
    }
}