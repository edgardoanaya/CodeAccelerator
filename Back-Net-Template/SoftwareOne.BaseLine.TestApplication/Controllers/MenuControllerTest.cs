//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Jessica Antía Hortúa</author>
// <email>mailto:jessica.antia@softwareone.com</email>
// <summary>Test class to check the functionality of the entity [Menu]</summary>
using SoftwareOne.BaseLine.Api.Controllers;
using SoftwareOne.BaseLine.Interfaces.ApplicationServices.Facade;
using Moq;
using Microsoft.AspNetCore.Mvc;
using SoftwareOne.BaseLine.Core.RequestDto;
using SoftwareOne.BaseLine.Core.ProcessServicesApplication;
using Microsoft.AspNetCore.Authorization;

namespace SoftwareOne.BaseLine.TestApplication
{
    public class MenuControllerTest
    {
        private readonly Mock<IAuthorizationService> authorizationService;
        private readonly Mock<Interfaces.DataAccess.IMenu> repositoryContext;
        private readonly Mock<IProcessServicesApplication> processServicesApplication;

        public MenuControllerTest() {
            authorizationService = new Mock<IAuthorizationService>();
            repositoryContext = new Mock<Interfaces.DataAccess.IMenu>();
            processServicesApplication = new Mock<IProcessServicesApplication>();
        }

        [Fact]
        public async Task Update_ValidRequest_ReturnsOk()
        {
            Base.Application.Validators.Menu validator = new Base.Application.Validators.Menu();
            Interfaces.ApplicationServices.Services.IMenu applicationServices = 
                new SoftwareOne.BaseLine.ApplicationServices.Services.Menu(repositoryContext.Object, processServicesApplication.Object, validator);
            IMenu facade = new SoftwareOne.BaseLine.ApplicationServices.Facade.Menu(applicationServices);
            List<Entities.Menu> resultList = new List<Entities.Menu> {
                new Entities.Menu{
                    Id = 1,
                    Badge = "Badge",
                    BadgeClass  = "BadgeClass",
                    Icon = "Icon",
                    Class = "Class",
                    IsExternalLink = true,
                    IsParent = true,
                    MenuId = 1,
                    Path = "Path",
                    Title = "Title"
                }
            };
            repositoryContext.Setup(x => x.UpdateAsync(It.IsAny<Entities.Menu>())).Returns(Task.FromResult(resultList.AsQueryable().FirstOrDefault()));
            // Arrange
            var service = new MenuController(facade, authorizationService.Object); 
            EntitiesDto.Menu menu = new EntitiesDto.Menu {
                Id = 1,
                    Badge = "Badge2",
                    BadgeClass  = "BadgeClass",
                    Icon = "Icon",
                    Class = "Class",
                    IsExternalLink = true,
                    IsParent = true,
                    MenuId = 1,
                    Path = "Path",
                    Title = "Title"
            };
            // Act
            var actionResult = await service.Put(menu);

            // We cast it to the expected response type
            OkObjectResult okResult = actionResult as OkObjectResult;

            // Assert
            Assert.NotNull(okResult);
            Assert.Equal(200, okResult.StatusCode);
        }

        [Fact]
        public void GetMenuByRole_ValidRequest_ReturnsMenus()
        {
            Base.Application.Validators.Menu validator = new Base.Application.Validators.Menu();
            Interfaces.ApplicationServices.Services.IMenu applicationServices = 
                new SoftwareOne.BaseLine.ApplicationServices.Services.Menu(repositoryContext.Object, processServicesApplication.Object, validator);
            IMenu facade = new SoftwareOne.BaseLine.ApplicationServices.Facade.Menu(applicationServices);
            List<Entities.Menu> resultList = new List<Entities.Menu> {
                new Entities.Menu{
                    Id = 1,
                    Badge = "Badge",
                    BadgeClass  = "BadgeClass",
                    Icon = "Icon",
                    Class = "Class",
                    IsExternalLink = true,
                    IsParent = true,
                    MenuId = 1,
                    Path = "Path",
                    Title = "Title"
                }
            };
            repositoryContext.Setup(x => x.ListAllAsync(It.IsAny<SwoParameterOfQuery<Entities.Menu>>())).Returns(Task.FromResult(resultList));
            // Arrange
            var service = new MenuController(facade, authorizationService.Object); 

            // Act
            List<EntitiesDto.Menu> menus = service.MenuByRol(1);

            // Assert
            Assert.NotNull(menus);
            Assert.Equal(1, menus.Count);
        }
    }
}