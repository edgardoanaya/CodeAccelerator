//------------------------------------------------------------------------------
// <auto-generated>
//     This code is part of the framework base.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Santiago Gil Roldán</author>
// <email>mailto:santiago.gil2@softwareone.com</email>
// <summary>Application Message Settings Enumerations.</summary>
namespace SoftwareOne.BaseLine.Core.ExtensionMethods
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Reflection;

    /// <summary>
    /// It is in charge of carrying out operations of enumerations.
    /// </summary>
    public static partial class ExtensionMethods
    {
        /// <summary>
        /// Generic method that is responsible for obtaining the description of the enumerations.
        /// </summary>
        /// <typeparam name="T">Enumerado</typeparam>
        /// <returns>Enumeration description</returns>
        public static IEnumerable<string> GetEnumerationsDescription<T>() where T : Enum
        {
            return from enumeration in Enum.GetValues(typeof(T)).Cast<T>()
                   select enumeration.GetEnumDescription();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string GetEnumDescription(this Enum value)
        {
            if (value != null)
            {
                FieldInfo fi = value.GetType().GetField(value.ToString());

                if (fi.GetCustomAttributes(typeof(DescriptionAttribute), false) is DescriptionAttribute[] attributes && attributes.Any())
                {
                    return attributes.First().Description;
                }

                return value.ToString();
            }
            return null;
        }

    }
}