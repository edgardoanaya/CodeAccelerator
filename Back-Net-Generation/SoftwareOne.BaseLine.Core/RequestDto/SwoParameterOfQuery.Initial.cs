//------------------------------------------------------------------------------
// <auto-generated>
//     This code is part of the framework base.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Santiago Gil Roldán</author>
// <email>mailto:santiago.gil2@softwareone.com</email>
// <summary>Object for building Dynamic Queries with the IQueryable.</summary>
namespace SoftwareOne.BaseLine.Core.RequestDto
{
    using System;
    using System.Linq;
    using System.Linq.Expressions;
    using static SoftwareOne.BaseLine.Core.Enumerations.SwoEnumApplication;
    using SoftwareOne.BaseLine.Core.ExtensionMethods;

    /// <summary>
    /// Object for building Dynamic Queries with the IQueryable
    /// </summary>
    /// <typeparam name="T">Objeto</typeparam>
    public partial class SwoParameterOfQuery<T>
       where T : class, new()
    {
        /// <summary>
        /// Current page.
        /// </summary>
        private int Page = -1;

        /// <summary>
        /// Dynamic sort by field
        /// </summary>
        public Tuple<string, Orden> OrderByDynamic { private set; get; }

        /// <summary>
        /// Dynamic where by field
        /// </summary>
        public Filter WhereDynamic { private set; get; }

        /// <summary>
        /// Generic Object Filters
        /// </summary>
        public Expression<Func<T, bool>> Filter { private set; get; }

        /// <summary>
        /// Include of relational tables of the object
        /// </summary>
        public Expression<Func<T, object>>[] Include { private set; get; }

        /// <summary>
        /// Generic object ordering
        /// </summary>
        public Func<IQueryable<T>, IOrderedQueryable<T>> OrderBy { private set; get; }

        /// <summary>
        /// Number of Records per Page
        /// </summary>
        public int Take { set; get; }

        /// <summary>
        /// Number of Records in the Table
        /// </summary>
        public long MaxCount { set; private get; }

        /// <summary>
        /// Calculate the number of records from they will be displayed
        /// </summary>
        public int Skip => (Page > 0 && Take > 0) ? (Take * (Page - 1)) : Page;

        /// <summary>
        /// Number of pages
        /// </summary>
        public long TotalPages => (MaxCount > 0 && Take > 0) ? (int)Math.Ceiling(MaxCount / (double)Take) : 0;

        /// <summary>
        /// Calculate the number of records from they will be displayed
        /// </summary>
        private long RecordsFrom => ((RecordsTo > 0 && Take > 0) ? (RecordsTo - Take) : 0);

        /// <summary>
        /// Calculate the number of records to they will be displayed
        /// </summary>
        private long RecordsTo => ((Take > 0 && Page > 0) ? (Take * Page) : 0);

        /// <summary>
        /// The Pagination object is built
        /// </summary>
        public PagedList TextPag => new PagedList
        {
            Page = Page,
            PageSize = Take,
            TotalPages = TotalPages,
            MaxCount = MaxCount,

            RecordsFrom = RecordsFrom + 1,
            RecordsTo = (RecordsTo > MaxCount) ? MaxCount : RecordsTo
        };

        #region Configurar SwoParameterOfQuery

        /// <summary>
        /// Clear object.
        /// </summary>
        public void Clear()
        {
            MaxCount = 0;
            Page = -1;
            Take = -1;
            Filter = null;
            OrderBy = null;
            OrderByDynamic = new Tuple<string, Orden>(string.Empty, Orden.Asc);
            WhereDynamic = default;
            Include = null;
        }

        /// <summary>
        /// Add filters to the object
        /// </summary>
        /// <param name="filter">Generic Object Filters</param>
        public void Add(Expression<Func<T, bool>> filter)
        {
            Filter = filter;
        }

        /// <summary>
        /// Add filters and sorts to the object
        /// </summary>
        /// <param name="filter">Generic Object Filters</param>
        /// <param name="orderBy">Generic Object Ordering</param>
        public void Add(Expression<Func<T, bool>> filter, Func<IQueryable<T>, IOrderedQueryable<T>> orderBy)
        {
            Filter = filter;
            OrderBy = orderBy;
        }

        private void ConfigurateOrderByDynamic(string orderByDynamic, string DirecOrden)
        {
            if (DirecOrden.IsValid())
            {
                DirecOrden = DirecOrden.FirstCharToUpper();
            }

            if (!Enum.TryParse(DirecOrden, out Orden eOrden))
            {
                eOrden = Orden.Asc;
            }

            OrderByDynamic = new Tuple<string, Orden>(orderByDynamic, eOrden);
        }

        #endregion
    }
}