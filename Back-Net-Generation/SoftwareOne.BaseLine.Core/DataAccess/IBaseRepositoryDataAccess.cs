//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Santiago Gil Roldán</author>
// <email>mailto:santiago.gil2@softwareone.com</email>
// <summary>Base interface that will allow communication between all application entities.</summary>
using System.Linq.Expressions;
using SoftwareOne.BaseLine.Core.RequestDto;

namespace SoftwareOne.BaseLine.Core.DataAccess
{
    /// <summary>
    /// Base interface that will allow communication between all application entities.
    /// </summary>
    /// <typeparam name="T">Business Entity</typeparam>
    public interface IBaseRepositoryDataAccess<T>
        where T : class, new()
    {
        /// <summary>
        /// Property containing the project's Database Context.
        /// </summary>
        IMainDataAccessContext Contexto { get; }

        /// <summary>
        /// Implementation List of Business Objects of the Entity <typeparamref name="T"/>
        /// </summary>
        /// <param name="parameterOfList">Composite object to build an advanced list on top of the entity <typeparamref name="T"/></param>
        /// <returns>Return Composite Object Listed according to the entity filters and defined pagination<typeparamref name="T"/></returns>
        SwoPaginatedList<T> ListAllPaged(SwoParameterOfQuery<T> parameterOfList);

        /// <summary>
        /// Implementation List of Business Objects of the Entity <typeparamref name="T"/>
        /// </summary>
        /// <returns>Returns the List according to the entity filters <typeparamref name="T"/></returns>
        ICollection<T> ListAll();

        /// <summary>
        /// Implementation List of Business Objects of the Entity <typeparamref name="T"/>
        /// </summary>
        /// <param name="parameterOfList">Composite object to build an advanced list on top of the entity <typeparamref name="T"/></param>
        /// <returns>Returns the List according to the entity filters <typeparamref name="T"/></returns>
        ICollection<T> ListAll(SwoParameterOfQuery<T> parameterOfList);

        /// <summary>
        /// Entity Business Object Async Listing Implementation <typeparamref name="T"/> 
        /// </summary>
        /// <returns>Returns the List according to the entity filters <typeparamref name="T"/></returns>
        Task<List<T>> ListAllAsync();

        /// <summary>
        /// Entity Business Object Async Listing Implementation <typeparamref name="T"/> 
        /// </summary>
        /// <param name="parameterOfList">Composite object to build an advanced list on top of the entity <typeparamref name="T"/></param>
        /// <returns>Returns the List according to the entity filters <typeparamref name="T"/></returns>
        Task<List<T>> ListAllAsync(SwoParameterOfQuery<T> parameterOfList);

        /// <summary>
        /// Number of Registrations of the Entity <typeparamref name="T"/>
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns the number of records according to the entity filter <typeparamref name="T"/></returns>
        int Count(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Implementation Business Object of the Entity <typeparamref name="T"/>
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns the object according to the entity filter <typeparamref name="T"/></returns>
        T? Get(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Business Object of the Entity <typeparamref name="T"/>
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <param name="include">Child entity inclusions <typeparamref name="T"/></param>
        /// <returns>Returns the object according to the entity filter <typeparamref name="T"/></returns>
        T? Get(Expression<Func<T, bool>> expression, Expression<Func<T, object>> include);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expression"></param>
        /// <param name="OrderBy"></param>
        /// <returns></returns>
        T? Get(Expression<Func<T, bool>> expression, Func<IQueryable<T>, IOrderedQueryable<T>> OrderBy);

        /// <summary>
        /// 
        /// </summary>
        /// <param name="expression"></param>
        /// <param name="include"></param>
        /// <param name="OrderBy"></param>
        /// <returns></returns>
        T? Get(Expression<Func<T, bool>> expression, Expression<Func<T, object>> include, Func<IQueryable<T>, IOrderedQueryable<T>> OrderBy);

        /// <summary>
        /// Entity Business Async Object Implementation <typeparamref name="T"/>
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns the object according to the entity filter <typeparamref name="T"/></returns>
        Task<T?> GetAsync(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Implementation of the Entity Business Object Creation <typeparamref name="T"/>
        /// </summary>
        /// <param name="objectAdd">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if Id Inserted or failing that number of altered records</returns>
        int Add(T objectAdd);

        /// <summary>
        /// Implementation of the Entity Business Object Creation <typeparamref name="T"/>
        /// </summary>
        /// <param name="listObjectsAdd">Listo de Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if Id Inserted or failing that number of altered records</returns>
        int Add(IEnumerable<T> listObjectsAdd);

        /// <summary>
        /// Entity Business Object Async Creation Implementation <typeparamref name="T"/>
        /// </summary>
        /// <param name="objectAdd">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if Id Inserted or failing that number of altered records</returns>
        Task<T?> AddAsync(T objectAdd);

        /// <summary>
        /// Entity Business Object Async Creation Implementation <typeparamref name="T"/>
        /// </summary>
        /// <param name="listObjectsAdd">Specified entity List <typeparamref name="T"/></param>
        /// <returns>Returns if Id Inserted or failing that number of altered records</returns>
        Task<int> AddAsync(IEnumerable<T> listObjectsAdd);

        /// <summary>
        /// Implementation Modification of the Business Objects of the Entity <typeparamref name="T"/> 
        /// </summary>
        /// <param name="objectUpdate">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        bool? Update(T objectUpdate);

        /// <summary>
        /// Implementation Modification of the Business Objects of the Entity <typeparamref name="T"/> 
        /// </summary>
        /// <param name="listObjectsUpdate">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        bool? Update(ICollection<T> listObjectsUpdate);

        /// <summary>
        /// Implementation Async Modification of Entity Business Objects<typeparamref name="T"/> 
        /// </summary>
        /// <param name="objectUpdate">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        Task<T?> UpdateAsync(T objectUpdate);

        /// <summary>
        /// Implementation Async Modification of Entity Business Objects<typeparamref name="T"/> 
        /// </summary>
        /// <param name="listObjectsUpdate">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        Task<int> UpdateAsync(ICollection<T> listObjectsUpdate);

        /// <summary>
        /// Implementation of the Deletion of the Entity's Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="objectDelete">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        bool? Delete(T objectDelete);

        /// <summary>
        /// Implementation of the Deletion of the Entity's Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        bool? Delete(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Implementation Deletion Async of Entity Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="objectDelete">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        Task<int> DeleteAsync(T objectDelete);

        /// <summary>
        /// Implementation Deletion Async of Entity Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the record)</returns>
        Task<int> DeleteAsync(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Implementation of massive deletion of the Entity's Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the register(s))</returns>
        bool? DeleteRange(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Implementation Maximum Async Deletion of Entity Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="listObjectsDelete">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the register(s))</returns>
        bool? DeleteRange(ICollection<T> listObjectsDelete);

        /// <summary>
        /// Implementation Maximum Async Deletion of Entity Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="expression">Filters on the entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the register(s))</returns>
        Task<int> DeleteRangeAsync(Expression<Func<T, bool>> expression);

        /// <summary>
        /// Implementation Maximum Async Deletion of Entity Business Objects <typeparamref name="T"/> 
        /// </summary>
        /// <param name="listObjectsDelete">Specified entity <typeparamref name="T"/></param>
        /// <returns>Returns if the operation was successful (altered the register(s))</returns>
        Task<int> DeleteRangeAsync(ICollection<T> listObjectsDelete);
    }
}