//------------------------------------------------------------------------------
// <auto-generated>
//     This code is part of the framework base.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Santiago Gil Roldán</author>
// <email>mailto:santiago.gil2@softwareone.com</email>
// <summary>Encapsulating class for adding conditions to the Dynamic Expression construction to generate generic queries.</summary>
namespace SoftwareOne.BaseLine.Core.ExpressionHelper
{
    using System.Linq.Expressions;

    /// <summary>
    /// Encapsulating class for adding conditions to the Dynamic Expression construction to generate generic queries.
    /// </summary>
    public class AddExpressionVisitor : ExpressionVisitor
    {
        /// <summary>
        /// Properties to add the Expression.
        /// </summary>
        private readonly Expression from;

        /// <summary>
        /// Properties to add the Expression.
        /// </summary>
        private readonly Expression to;

        /// <summary>
        /// Constructor method to add expressions.
        /// </summary>
        /// <param name="from">Expression from</param>
        /// <param name="to">Expression to</param>
        public AddExpressionVisitor(Expression from, Expression to)
        {
            this.from = from;
            this.to = to;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        public override Expression Visit(Expression node)
        {
            return node == from ? to : base.Visit(node);
        }
    }
}