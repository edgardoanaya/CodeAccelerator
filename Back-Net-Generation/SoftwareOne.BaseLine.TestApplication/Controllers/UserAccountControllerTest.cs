//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Jessica Antía Hortúa</author>
// <email>mailto:jessica.antia@softwareone.com</email>
// <summary>Test class to check the functionality of the controller [UserAccount]</summary>
using SoftwareOne.BaseLine.Api.Controllers;
using SoftwareOne.BaseLine.EntitiesDto.Request;
using SoftwareOne.BaseLine.EntitiesDto.Response;
using SoftwareOne.BaseLine.Interfaces.ApplicationServices;
using SoftwareOne.BaseLine.Interfaces.ApplicationServices.Facade;
using Moq;

namespace SoftwareOne.BaseLine.TestApplication
{
    public class UserAccountControllerTest
    {
        private readonly Mock<IManageUserAccount> _userManagerMock;
        private readonly Mock<IUser> _userFacadeMock;

        public UserAccountControllerTest() {
            _userManagerMock = new Mock<IManageUserAccount>();
            _userFacadeMock = new Mock<IUser>();
        }

        [Fact]
        public async Task Login_ValidRequest_ReturnsLoginAuthentication()
        {
            var request = new LoginRequest
            {
                User = "user",
                Password = "123"
            };
            LoginAuthentication result = new LoginAuthentication {
                FullName = "user",
                Token = "123",
                RoleId = 1,
                RoleName = "Administrator"
            };
            _userManagerMock.Setup(x => x.LoginApplicationAsync(request)).Returns(Task.FromResult(result));
            // Arrange
            var service = new UserAccountController(_userManagerMock.Object, _userFacadeMock.Object);

            // Act
            var loginResponse = await service.Login(request);

            // Assert
            Assert.NotNull(loginResponse);
            Assert.IsType<LoginAuthentication>(loginResponse);
        }

        [Fact]
        public async Task Register_ValidRequest_ReturnsUser()
        {
            var request = new EntitiesDto.User
            {
                FullName = "user",
                Email = "user@email.com",
                EmailConfirmed = true,
                PasswordHash = "123",
                PhoneNumber = "123",
                RoleId = 1,
                UserName = "user"
            };
            var result = new EntitiesDto.User
            {
                FullName = "user",
                Email = "user@email.com",
                EmailConfirmed = true,
                PasswordHash = "123",
                PhoneNumber = "123",
                RoleId = 1,
                RoleName = "Administrator",
                UserName = "user",
                Id = 1
            };
            _userFacadeMock.Setup(x => x.AddAsync(request)).Returns(Task.FromResult(result));
            // Arrange
            var service = new UserAccountController(_userManagerMock.Object, _userFacadeMock.Object);

            // Act
            var registerResponse = await service.Register(request);

            // Assert
            Assert.NotNull(registerResponse);
            Assert.IsType<EntitiesDto.User>(registerResponse);
        }

        [Fact]
        public async Task ValidateToken_ValidRequest_ReturnsUser()
        {
            var request = "token";
            var result = "user@email.com"; 
            var resultGet = new EntitiesDto.User
            {
                FullName = "user",
                Email = "user@email.com",
                EmailConfirmed = true,
                PasswordHash = "123",
                PhoneNumber = "123",
                RoleId = 1,
                RoleName = "Administrator",
                UserName = "user",
                Id = 1
            };
            _userManagerMock.Setup(x => x.ValidateSession(request)).Returns(result);
            _userFacadeMock.Setup(x => x.GetAsync(x => x.Email == result)).Returns(Task.FromResult(resultGet));
            // Arrange
            var service = new UserAccountController(_userManagerMock.Object, _userFacadeMock.Object);

            // Act
            var registerResponse = await service.ValidateToken(request);

            // Assert
            Assert.NotNull(registerResponse);
            Assert.IsType<EntitiesDto.User>(registerResponse);
        }
    }
}