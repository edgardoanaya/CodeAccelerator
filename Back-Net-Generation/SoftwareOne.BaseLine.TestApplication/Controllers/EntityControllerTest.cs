//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Jessica Antía Hortúa</author>
// <email>mailto:jessica.antia@softwareone.com</email>
// <summary>Test class to check the functionality of the entity [Entity]</summary>
using SoftwareOne.BaseLine.Api.Controllers;
using SoftwareOne.BaseLine.Interfaces.ApplicationServices.Facade;
using Moq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using SoftwareOne.BaseLine.Core.ProcessServicesApplication;

namespace SoftwareOne.BaseLine.TestApplication
{
    public class EntityControllerTest
    {
        private readonly Mock<IAuthorizationService> authorizationService;
        private readonly Mock<Interfaces.DataAccess.IEntity> repositoryContext;
        private readonly Mock<IProcessServicesApplication> processServicesApplication;

        public EntityControllerTest() {
            authorizationService = new Mock<IAuthorizationService>();
            repositoryContext = new Mock<Interfaces.DataAccess.IEntity>();
            processServicesApplication = new Mock<IProcessServicesApplication>();
        }

        [Fact]
        public async Task Create_ValidRequest_ReturnsEntity()
        {
            Base.Application.Validators.Entity validator = new Base.Application.Validators.Entity();
            Interfaces.ApplicationServices.Services.IEntity applicationServices = 
                new SoftwareOne.BaseLine.ApplicationServices.Services.Entity(repositoryContext.Object, processServicesApplication.Object, validator);
            IEntity facade = new SoftwareOne.BaseLine.ApplicationServices.Facade.Entity(applicationServices);
            List<Entities.Entity> resultList = new List<Entities.Entity> {
                new Entities.Entity{
                    Id = 1,
                    Name = "Entity 1"
                }
            };
            repositoryContext.Setup(x => x.AddAsync(It.IsAny<Entities.Entity>()))
                .Returns(Task.FromResult(resultList.AsQueryable().FirstOrDefault()));
            // Arrange
            var service = new EntityController(facade, authorizationService.Object); 
            EntitiesDto.Entity entity = new EntitiesDto.Entity {
                Name = "Entity 1"
            };
            // Act
            var actionResult = await service.Post(entity);

            // We cast it to the expected response type
            OkObjectResult okResult = actionResult as OkObjectResult;

            // Assert
            Assert.NotNull(okResult);
            Assert.Equal(200, okResult.StatusCode);
        }
    }
}