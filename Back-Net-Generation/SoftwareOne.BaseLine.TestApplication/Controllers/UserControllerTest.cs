//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright company="SoftwareOne">Copyright(c) 2023 All Rights Reserved.</copyright>
// <author>Jessica Antía Hortúa</author>
// <email>mailto:jessica.antia@softwareone.com</email>
// <summary>Test class to check the functionality of the entity [User]</summary>
using SoftwareOne.BaseLine.Api.Controllers;
using SoftwareOne.BaseLine.Interfaces.ApplicationServices.Facade;
using Moq;
using SoftwareOne.BaseLine.Core.RequestDto;
using SoftwareOne.BaseLine.Core.ProcessServicesApplication;
using Microsoft.AspNetCore.Authorization;

namespace SoftwareOne.BaseLine.TestApplication
{
    public class UserControllerTest
    {
        private readonly Mock<IAuthorizationService> authorizationService;
        private readonly Mock<Interfaces.DataAccess.IUser> repositoryContext;
        private readonly Mock<IProcessServicesApplication> processServicesApplication;

        public UserControllerTest() {
            authorizationService = new Mock<IAuthorizationService>();
            repositoryContext = new Mock<Interfaces.DataAccess.IUser>();
            processServicesApplication = new Mock<IProcessServicesApplication>();
        }

        [Fact]
        public async Task Get_ValidRequest_ReturnsUsers()
        {
            Base.Application.Validators.User validator = new Base.Application.Validators.User();
            Interfaces.ApplicationServices.Services.IUser applicationServices = 
                new SoftwareOne.BaseLine.ApplicationServices.Services.User(repositoryContext.Object, processServicesApplication.Object, validator);
            IUser facade = new SoftwareOne.BaseLine.ApplicationServices.Facade.User(applicationServices);
            List<Entities.User> resultList = new List<Entities.User> {
                new Entities.User{
                    Id = 1,
                    Email = "user@email.com",
                    EmailConfirmed = true,
                    FullName = "user lastname",
                    UserName = "user1"
                }
            };
            repositoryContext.Setup(x => x.ListAllAsync(It.IsAny<SwoParameterOfQuery<Entities.User>>())).Returns(Task.FromResult(resultList));
            // Arrange
            var service = new UserController(facade, authorizationService.Object); 

            // Act
            var getResponse = await service.Get();

            // Assert
            Assert.NotNull(getResponse);
            Assert.Equal(1, getResponse.Count);
        }
    }
}